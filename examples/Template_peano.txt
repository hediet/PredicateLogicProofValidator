
GlobalSymbols
{
	Let eq(2) be a predicate.
    Let s(1) be a function.
    Let z(0) be a function.
    Let add(2) be a function.
    Let mul(2) be a function.
}

Axiom A1
{
    Symbols:
        Let phi, psi be formulas.

    Assertion:
        |- phi -> (psi -> phi)
}

Axiom A2
{
    Symbols:
        Let phi, psi, chi be formulas.

    Assertion:
        |- (phi -> (psi -> chi)) -> ((phi -> psi) -> (phi -> chi))
}

Axiom A3
{
    Symbols:
        Let phi, psi be formulas.

    Assertion:
        |- (!phi -> !psi) -> (psi -> phi)
}  

Axiom A4
{
    Symbols:
        Let xi be a variable.
        Let phi be a formula.
        Let sigma be a term.

	Conditions:
		(phi[xi <- sigma]) is collision free.

    Assertion:
        |- forall xi: phi -> phi[xi <- sigma]
}

Axiom A5
{
    Symbols:
        Let xi be a variable.
        Let phi, psi be formulas.

	Conditions:
		<xi> is not free in (phi).

    Assertion:
        |- forall xi: (phi -> psi) -> (phi -> forall xi: psi)
}

Rule MP
{
    Symbols:
        Let phi, psi be formulas.

    Assumptions:
        |- phi
        |- phi -> psi

    Conclusion:
        |- psi
}

Rule G
{
    Symbols:
        Let phi be a formula.
        Let xi be a variable.
        
    Conditions:
    	<xi> is not free in hypothesis.

    Assumptions:
        |- phi

    Conclusion:
        |- forall xi: phi
}


Axiom S1
{
    Symbols:
        Let sigma, tau, rho be terms.

    Assertion:
        |- eq(sigma, tau) -> (eq(sigma, rho) -> eq(tau, rho))
}

Axiom S2
{
    Symbols:
        Let sigma, tau be terms.

    Assertion:
        |- eq(sigma, tau) -> eq(s(sigma), s(tau))
}


Axiom S3
{
    Symbols:
        Let sigma be a term.

    Assertion:
        |- !eq(z(), s(sigma))
}


Axiom S4
{
    Symbols:
        Let sigma, tau be terms.

    Assertion:
        |- eq(s(sigma), s(tau)) -> eq(sigma, tau)
}


Axiom S5
{
    Symbols:
        Let sigma be a term.

    Assertion:
        |- eq(add(sigma, z()), sigma)
}

Axiom S6
{
    Symbols:
        Let sigma, tau be terms.

    Assertion:
        |- eq(add(sigma, s(tau)), s(add(sigma, tau)))
}


Axiom S7
{
    Symbols:
        Let sigma be a term.

    Assertion:
        |- eq(mul(sigma, z()), z())
}

Axiom S8
{
    Symbols:
        Let sigma, tau be terms.

    Assertion:
        |- eq(mul(sigma, s(tau)), add(mul(sigma, tau), sigma))
}

Axiom S9
{
    Symbols:
    	Let phi be a formula.
        Let x be a variable.

    Assertion:
        |- phi[x <- z()] -> (forall x: (phi -> phi[x <- s(x)]) -> forall x: phi)
}



Hypothesis

Deduction

Theorem T1
{
    Symbols:
        Let phi be a formula.
    
	Assertion:
		|- phi -> phi

    Proof:
        # 1. A2(phi, phi -> phi, phi)
        # 2. A1(phi, phi -> phi)
        # 3. MP(@2, @1)
        # 4. A1(phi, phi)
        # 5. MP(@4, @3)
}

Theorem T2
{
	Symbols:
    	Let phi, psi, chi be formulas.
        
    Assertion:
    	|- (phi -> psi) -> ((psi -> chi) -> (phi -> chi))
        
    Proof:
    	# 1. Hypothesis(phi)
        # 2. Hypothesis(phi -> psi)
        # 3. MP(@1, @2)
        # 4. Hypothesis(psi -> chi)
        # 5. MP(@3, @4)
        # 6. Deduction(@5, phi)
        # 7. Deduction(@6, psi -> chi)
        # 8. Deduction(@7, phi -> psi)
}


Theorem T3
{
	Symbols:
    	Let phi, psi be formulas.
      
    Assertion:
    	|- phi -> ((phi -> psi) -> psi)
        
    Proof:
    	# 1. Hypothesis(phi)
        # 2. Hypothesis(phi -> psi)
        # 3. MP(@1, @2)
        # 4. Deduction(@3, phi -> psi)
        # 5. Deduction(@4, phi)
}

Theorem T4
{ 
	Symbols:
    	Let phi be a formula.
      
    Assertion:
    	|- !!phi  -> phi
        
    Proof:
    	# 1. A1(!!phi, !!!!phi)
        # 2. Hypothesis(!!phi)
        # 3. MP(@2, @1)
        # 4. A3(!!!phi, !phi)
        # 5. MP(@3, @4)
        # 6. A3(phi, !!phi)
        # 7. MP(@5, @6)
        # 8. MP(@2, @7)
        # 9. Deduction(@8, !!phi)
}

Theorem T5
{
	Symbols:
    	Let phi be a formula. 
        
    Assertion:
    	|- phi -> !!phi
        
    Proof:
    	# 1. A3(!!phi, phi)
        # 2. T4(!phi)
        # 3. MP(@2, @1)
}


Theorem T4a
{
	Symbols:
    	Let phi, psi be formulas.
        
	Assertion:
    	|- (!!phi -> psi) -> (phi -> psi)
        
    Proof:
    	# 1. T5(phi)
        # 2. T2(phi, !!phi, psi)
        # 3. MP(@1, @2)
        
}

Theorem T6
{
	Symbols:
    	Let phi, psi be formulas.
        
    Assertion:
    	|- (phi -> psi) -> (!psi -> !phi)
        
    Proof:
    	# 1. A3(!phi, !psi)
        # 2. Hypothesis(phi -> psi)
        # 3. Hypothesis(!!phi)
        # 4. T4(phi)
        # 5. MP(@3, @4)
        # 6. MP(@5, @2)	
        # 7. T5(psi)
        # 8. MP(@6, @7)
        # 9. Deduction(@8, !!phi)
        # 10. Deduction(@9, phi -> psi)
        # 11. MP(@2, @10)
        # 12. MP(@11, @1)
        # 13. Deduction(@12, phi -> psi)
}


Theorem TSwapPremise
{
	Symbols:
    	Let phi, psi, chi be formulas.

    Assertion:
    	|- (phi -> (psi -> chi)) -> (psi -> (phi -> chi))
    
 	Proof:
    	# 1. Hypothesis(phi -> (psi -> chi))
        # 2. Hypothesis(psi)
        # 3. Hypothesis(phi)
        # 4. MP(@3, @1)
        # 5. MP(@2, @4)
        # 6. Deduction(@5, phi)
        # 7. Deduction(@6, psi)
        # 8. Deduction(@7, phi -> (psi -> chi))
}


Theorem PA1
{
	Symbols:
    	Let sigma be a term.
        
    Assertion:
        |- eq(sigma, sigma)
        
    Proof:
    	# 1. S5([sigma])
        # 2. S1([add(sigma, z())], [sigma], [sigma])
        # 3. MP(@1, @2)
        # 4. MP(@1, @3)
}




Theorem PA2
{
	Symbols:
    	Let sigma, tau be terms.
        
    Assertion:
        |- eq(sigma, tau) -> eq(tau, sigma)
        
    Proof:
    	# 1. S1([sigma], [tau], [sigma])
        # 2. TSwapPremise(eq(sigma, tau), 
        		eq(sigma, sigma), eq(tau, sigma))
        # 3. MP(@1, @2)
        # 4. PA1([sigma])
        # 5. MP(@4, @3)
}



Theorem PA3
{
	Symbols:
    	Let sigma, tau, rho be terms.
        
    Assertion:
        |- eq(sigma, tau) -> (eq(tau, rho) -> eq(sigma, rho))
        
    Proof:
    	# 1. S1([tau], [sigma], [rho])
        # 2. PA2([sigma], [tau])
        # 3. T2(eq(sigma, tau), 
        	eq(tau, sigma), eq(tau, rho) -> eq(sigma, rho))
        # 4. MP(@2, @3)
        # 5. MP(@1, @4)
}


Theorem PA4
{
	Symbols:
    	Let sigma, tau, rho be terms.
        
    Assertion:
        |- eq(sigma, tau) -> (eq(rho, tau) -> eq(sigma, rho))
        
    Proof:
       # 1. PA3([sigma], [tau], [rho])
       # 2. Hypothesis(eq(sigma, tau))
       # 3. MP(@2, @1)
       # 4. PA2([rho], [tau])
       # 5. T2(eq(rho, tau), eq(tau, rho), eq(sigma, rho))
       # 6. MP(@4, @5)
       # 7. MP(@3, @6)
       # 8. Deduction(@7, eq(sigma, tau))
}


Theorem PA5
{
	Symbols:
    	Let sigma, tau be terms.
        
    Assertion:
        |- forall x: (eq(sigma, tau) -> eq(add(sigma, x), add(tau, x)))
    
    Conditions:
    	<x> is not in [sigma].
        <x> is not in [tau].
    
    
    Proof:
    	// Induktionsanfang:
        
    	# a1. S5([sigma])
        # a2. PA2([add(sigma, z())], [sigma])
        # a3. MP(@a1, @a2)
        # a4. S1([sigma], [add(sigma, z())], [tau])
        # a5. MP(@a3, @a4)
        
    	# a6. PA4([add(tau, z())], [tau], [add(sigma, z())])
        # a7. S5([tau])
        # a8. MP(@a7, @a6)
        # a9. Hypothesis(eq(sigma, tau))
        # a10. MP(@a9, @a5)
        # a11. MP(@a10, @a8)
        # a12. PA2([add(tau, z())], [add(sigma, z())])
        # a13. MP(@a11, @a12)
        # a14. Deduction(@a13, eq(sigma, tau))
        
        
        // Induktionsschluss:
        
        # b1. Hypothesis(eq(sigma, tau) -> eq(add(sigma, x), add(tau, x)))
        # b2. S2([add(sigma, x)], [add(tau, x)])
        # b3. Hypothesis(eq(add(sigma, x), add(tau, x)))
        # b4. MP(@b3, @b2)
        # b5. S6([sigma], [x])
        # b6. PA3([add(sigma, s(x))], [s(add(sigma, x))], [s(add(tau, x))])
        # b7. MP(@b5, @b6)
        # b8. MP(@b4, @b7)
        # b9. S6([tau], [x])
        # b10. PA2([add(tau, s(x))], [s(add(tau, x))])
        # b11. MP(@b9, @b10)
        # b12. PA3([add(sigma, s(x))], [s(add(tau, x))], [add(tau, s(x))])
        # b13. MP(@b8, @b12)
        # b14. MP(@b11, @b13)
        # b15. Deduction(@b14, eq(add(sigma, x), add(tau, x)))
        # b16. T2(eq(sigma, tau), eq(add(sigma, x), add(tau, x)),
        		eq(add(sigma, s(x)), add(tau, s(x))))
        # b17. MP(@b1, @b16)
        # b18. MP(@b15, @b17)
        # b19. Deduction(@b18, 
        		eq(sigma, tau) -> eq(add(sigma, x), add(tau, x)))
        # b20. G(@b19, <x>)
        
        // Vollständige Induktion
        
        # c1. S9(eq(sigma, tau) -> eq(add(sigma, x), add(tau, x)), <x>)
        # c2. MP(@a14, @c1)
        # c3. MP(@b20, @c2)        
}



Theorem PA6
{
        
    Assertion:
          |- forall x: (eq(x, add(z(), x)))
        
    Proof:
    	// Induktionsanfang:
        
        # a1. S5([z()])
        # a2. PA2([add(z(), z())], [z()])
        # a3. MP(@a1, @a2)
        
        // Induktionsschritt:
        
        # b1. Hypothesis(eq(x, add(z(), x)))
        # b2. S2([x], [add(z(), x)])
        # b3. MP(@b1, @b2)
        # b4. S6([z()], [x])
        # b5. PA4([s(x)], [s(add(z(), x))], [add(z(), s(x))])
        # b6. MP(@b3, @b5)
        # b7. MP(@b4, @b6)
        # b8. Deduction(@b7, eq(x, add(z(), x)))
        # b9. G(@b8, <x>)
        
        // Vollständige Induktion:
        
        # c1. S9(eq(x, add(z(), x)), <x>)
        # c2. MP(@a3, @c1)
        # c3. MP(@b9, @c2)
}


Theorem PA7
{
	Symbols:
    	Let sigma be a term.
        
    Assertion:
          |- eq(add(sigma, s(z())), s(sigma))
        
    Proof:
    	
}


Theorem PA8
{
	Symbols:
    	Let sigma be a term.
        
    Assertion:
          |- eq(mul(sigma, s(z())), sigma)
        
    Proof:
    	
}


